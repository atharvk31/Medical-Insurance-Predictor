{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "a4e108f8-6b3e-46a1-be47-5ee97128f3ff",
   "metadata": {},
   "source": [
    "# Introduction "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3efd96bc-2ffd-49b9-a4df-7860ba32bd5e",
   "metadata": {},
   "source": [
    "This project aims to develop a machine learning model that can estimate the medical insurance premium a person might be charged based on various factors such as age, gender, BMI, number of children, smoking habits, and geographic region.\n",
    "This project demonstrates the practical application of data preprocessing, feature engineering, model training, evaluation, and improvement strategies to solve a real-world prediction problem in the healthcare domain."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "58456472-9428-406b-b93b-f3876029f8ee",
   "metadata": {},
   "source": [
    "### Importing the Dependencies"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "id": "235ff041-d63d-4666-9129-889ef2947c2d",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "id": "936f641b-734f-4ee9-b116-7c22f8a36b97",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "id": "244a2997-8042-436d-ad42-206c12ee2ef3",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "id": "3f15ebf6-d7fe-4e37-a304-eba7eb10d625",
   "metadata": {},
   "outputs": [],
   "source": [
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d7231b5f-c552-434b-b6ac-e6a171b4f8ba",
   "metadata": {},
   "source": [
    "### Data collection"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "id": "9e63a38d-8169-4fe4-be0d-f6b87d74e6a8",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv(r\"C:\\Users\\athar\\Downloads\\Datasets\\insurance.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "id": "a7273082-0e77-446a-bb28-bf741495c22d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>sex</th>\n",
       "      <th>bmi</th>\n",
       "      <th>children</th>\n",
       "      <th>smoker</th>\n",
       "      <th>region</th>\n",
       "      <th>expenses</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>19</td>\n",
       "      <td>female</td>\n",
       "      <td>27.9</td>\n",
       "      <td>0</td>\n",
       "      <td>yes</td>\n",
       "      <td>southwest</td>\n",
       "      <td>16884.92</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>18</td>\n",
       "      <td>male</td>\n",
       "      <td>33.8</td>\n",
       "      <td>1</td>\n",
       "      <td>no</td>\n",
       "      <td>southeast</td>\n",
       "      <td>1725.55</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>28</td>\n",
       "      <td>male</td>\n",
       "      <td>33.0</td>\n",
       "      <td>3</td>\n",
       "      <td>no</td>\n",
       "      <td>southeast</td>\n",
       "      <td>4449.46</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>33</td>\n",
       "      <td>male</td>\n",
       "      <td>22.7</td>\n",
       "      <td>0</td>\n",
       "      <td>no</td>\n",
       "      <td>northwest</td>\n",
       "      <td>21984.47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>32</td>\n",
       "      <td>male</td>\n",
       "      <td>28.9</td>\n",
       "      <td>0</td>\n",
       "      <td>no</td>\n",
       "      <td>northwest</td>\n",
       "      <td>3866.86</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   age     sex   bmi  children smoker     region  expenses\n",
       "0   19  female  27.9         0    yes  southwest  16884.92\n",
       "1   18    male  33.8         1     no  southeast   1725.55\n",
       "2   28    male  33.0         3     no  southeast   4449.46\n",
       "3   33    male  22.7         0     no  northwest  21984.47\n",
       "4   32    male  28.9         0     no  northwest   3866.86"
      ]
     },
     "execution_count": 127,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "id": "be522c88-8fd0-4ebe-9432-e7cb7f7d95f0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>sex</th>\n",
       "      <th>bmi</th>\n",
       "      <th>children</th>\n",
       "      <th>smoker</th>\n",
       "      <th>region</th>\n",
       "      <th>expenses</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1333</th>\n",
       "      <td>50</td>\n",
       "      <td>male</td>\n",
       "      <td>31.0</td>\n",
       "      <td>3</td>\n",
       "      <td>no</td>\n",
       "      <td>northwest</td>\n",
       "      <td>10600.55</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1334</th>\n",
       "      <td>18</td>\n",
       "      <td>female</td>\n",
       "      <td>31.9</td>\n",
       "      <td>0</td>\n",
       "      <td>no</td>\n",
       "      <td>northeast</td>\n",
       "      <td>2205.98</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1335</th>\n",
       "      <td>18</td>\n",
       "      <td>female</td>\n",
       "      <td>36.9</td>\n",
       "      <td>0</td>\n",
       "      <td>no</td>\n",
       "      <td>southeast</td>\n",
       "      <td>1629.83</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1336</th>\n",
       "      <td>21</td>\n",
       "      <td>female</td>\n",
       "      <td>25.8</td>\n",
       "      <td>0</td>\n",
       "      <td>no</td>\n",
       "      <td>southwest</td>\n",
       "      <td>2007.95</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1337</th>\n",
       "      <td>61</td>\n",
       "      <td>female</td>\n",
       "      <td>29.1</td>\n",
       "      <td>0</td>\n",
       "      <td>yes</td>\n",
       "      <td>northwest</td>\n",
       "      <td>29141.36</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      age     sex   bmi  children smoker     region  expenses\n",
       "1333   50    male  31.0         3     no  northwest  10600.55\n",
       "1334   18  female  31.9         0     no  northeast   2205.98\n",
       "1335   18  female  36.9         0     no  southeast   1629.83\n",
       "1336   21  female  25.8         0     no  southwest   2007.95\n",
       "1337   61  female  29.1         0    yes  northwest  29141.36"
      ]
     },
     "execution_count": 128,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "id": "1c8f97a3-2aee-4c85-b7c7-6a1e3cd0d2c6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1338, 7)"
      ]
     },
     "execution_count": 129,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "id": "73867d11-b61b-42df-bd5e-bcea95f02870",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1338 entries, 0 to 1337\n",
      "Data columns (total 7 columns):\n",
      " #   Column    Non-Null Count  Dtype  \n",
      "---  ------    --------------  -----  \n",
      " 0   age       1338 non-null   int64  \n",
      " 1   sex       1338 non-null   object \n",
      " 2   bmi       1338 non-null   float64\n",
      " 3   children  1338 non-null   int64  \n",
      " 4   smoker    1338 non-null   object \n",
      " 5   region    1338 non-null   object \n",
      " 6   expenses  1338 non-null   float64\n",
      "dtypes: float64(2), int64(2), object(3)\n",
      "memory usage: 73.3+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "id": "92a24574-5262-48e8-8b19-f17f7448c14d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "age         0\n",
       "sex         0\n",
       "bmi         0\n",
       "children    0\n",
       "smoker      0\n",
       "region      0\n",
       "expenses    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 131,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c9934ba9-5ca0-442e-8db1-a1936b4a8c39",
   "metadata": {},
   "source": [
    "### Exploratory Data Anaysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "id": "c179c2cf-214b-4fc1-9480-2e5b3cb2eeee",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x231246658e0>"
      ]
     },
     "execution_count": 133,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 500x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.displot(df['expenses'] , kde = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "id": "71b4c313-7641-485d-9b79-d49768cd7d7d",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\athar\\AppData\\Local\\Temp\\ipykernel_17016\\198831124.py:2: FutureWarning: \n",
      "\n",
      "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
      "\n",
      "  sns.countplot(x = 'sex' , data = df ,  palette='bright')\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Sex')"
      ]
     },
     "execution_count": 134,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAmoAAAJuCAYAAAAAQy5pAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjkuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8hTgPZAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAyrklEQVR4nO3dfXRU9YH/8c+QJ0NIRkhghpEIQVPFJggGDktEk+UhkRZQcY0F9eASXTAYOzwsiBSKrk0KHh5UtlRYCgiHjR66qF0VCa6kxiiEKKfyoLUYJNQMERsnAdNJTO7vD39MHRJUQpL5krxf59xznO/93pnv9Ryn7965M7FZlmUJAAAAxukW7AUAAACgZYQaAACAoQg1AAAAQxFqAAAAhiLUAAAADEWoAQAAGIpQAwAAMBShBgAAYChCDQAAwFCEGgD8f3v37tXtt9+uK6+8UhEREXI4HBo5cqTmzp0b7KUB6KJs/AkpAJBeeeUVTZo0Senp6XrggQfUt29fVVZWav/+/SooKNCJEyeCvUQAXRChBgCS0tLS9Ne//lUffvihQkNDA/Y1NTWpWzc+gADQ8XjnAQBJX3zxheLi4ppFmqRmkfb8889r5MiRioqKUo8ePZSZman333/fv7+4uFhhYWGaN29ewHGbNm2SzWbThg0b2uckAHQ6hBoASBo5cqT27t2rhx9+WHv37lVDQ0OL8/Ly8jRlyhRdd911euGFF7RlyxbV1tbqpptu0uHDhyVJo0aN0hNPPKEVK1bo5ZdfliQdOnRIs2bN0j333KPs7OwOOy8AlzY++gQAfXNF7bbbblNxcbEkKSwsTMOHD9fEiRP10EMPqUePHqqoqNDAgQP14IMP6umnn/Yfe/r0aSUmJurmm2/W888/L0myLEsTJkxQSUmJiouLlZWVpaamJu3fv19RUVFBOUcAlx5CDQC+Zf/+/XrjjTe0f/9+7dmzR6dOndKAAQNUWlqqF198UQ888IBKS0s1ZMiQgOPuuecevfnmmzp58qR/7IsvvtDQoUP1+eefy2azae/evUpOTu7gMwJwKWt+MwYAdGHDhg3TsGHDJEkNDQ1asGCBVq1apeXLl8tut0uShg8f3uKx597LFhsbq0mTJuk///M/dfvttxNpAC4YV9QA4Dt4vV5dfvnlGj9+vG699VbNnDlT27dvV//+/VucfzbyJKmwsFC33HKLhg0bpn379mn79u264447OmrpADoBrqgBgKTKykr17du32fiRI0ckSS6XS5mZmQoNDdXRo0e/N7gqKyt1zz33KC0tTYWFhZo8ebKys7N1ww03KCEhoV3OAUDnwxU1AJA0ePBg9evXTxMnTtS1116rpqYmHThwQCtWrFBtba1KSkqUnJys/Px8LVmyRNnZ2brlllvUs2dPnTx5Uvv27VNUVJQee+wxNTY2asyYMfrwww914MABOZ1OVVdXa8iQIXI4HCouLlZ4eHiwTxnAJYBQAwBJL7zwgl566SWVlpaqsrJSPp9Pffv2VVpamhYuXKhBgwb557700kt66qmnVFZWJp/PJ6fTqeHDh2vmzJkaM2aMfvGLXyg/P1+FhYUaPXq0/7h33nlHN998s2bNmqXVq1cH4SwBXGoINQAAAEPxg7cAAACGItQAAAAMRagBAAAYilADAAAwFKEGAABgKEINAADAUPxlAklNTU367LPPFB0dLZvNFuzlAACATsyyLNXW1srlcjX7G8HnItQkffbZZ4qPjw/2MgAAQBdSUVGhfv36feccQk1SdHS0pG/+hcXExAR5NQAAoDOrqalRfHy8vz++C6Em+T/ujImJIdQAAECH+CG3WwX1ywQDBgyQzWZrts2aNUvSN5/hLl26VC6XS5GRkUpPT9ehQ4cCnsPn8yk3N1dxcXGKiorSpEmTdOLEiWCcDgAAQJsKaqid/ePHZ7fCwkJJ0p133ilJWr58uVauXKk1a9aotLRUTqdT48aNU21trf853G63duzYoYKCAhUXF+v06dOaMGGCGhsbg3JOAAAAbcWoP8rudrv1v//7v/r4448lSS6XS263WwsWLJD0zdUzh8OhZcuWacaMGfJ6verdu7e2bNmiu+66S9I/vhjw6quvKjMz8we9bk1Njex2u7xeLx99AgCAdnUh3WHM76jV19dr69atmj59umw2m8rLy+XxeJSRkeGfExERobS0NJWUlEiSysrK1NDQEDDH5XIpKSnJP6clPp9PNTU1ARsAAIBpjAm1F198UV9++aXuu+8+SZLH45EkORyOgHkOh8O/z+PxKDw8XD179jzvnJbk5+fLbrf7N36aAwAAmMiYUNuwYYPGjx8vl8sVMH7uNyIsy/reb0l835yFCxfK6/X6t4qKitYvHAAAoJ0YEWqffvqpdu/erfvvv98/5nQ6JanZlbGqqir/VTan06n6+npVV1efd05LIiIi/D/FwU9yAAAAUxkRahs3blSfPn3005/+1D+WkJAgp9Pp/yao9M19bEVFRUpNTZUkpaSkKCwsLGBOZWWlDh486J8DAABwqQr6D942NTVp48aNmjZtmkJD/7Ecm80mt9utvLw8JSYmKjExUXl5eerevbumTp0qSbLb7crOztbcuXMVGxurXr16ad68eUpOTtbYsWODdUoAAABtIuihtnv3bh0/flzTp09vtm/+/Pmqq6tTTk6OqqurNWLECO3atSvgTy6sWrVKoaGhysrKUl1dncaMGaNNmzYpJCSkI08DAACgzRn1O2rBwu+oAQCAjnJJ/o4aAAAAAhFqAAAAhiLUAAAADEWoAQAAGIpQAwAAMBShBgAAYChCDQAAwFCEGgAAgKEINQAAAEMRagAAAIYi1AAAAAwV9D/KDgD4YY4tSQj2EoBObcDj5cFeQjNcUQMAADAUoQYAAGAoQg0AAMBQhBoAAIChCDUAAABDEWoAAACGItQAAAAMRagBAAAYilADAAAwFKEGAABgKP6EVBBcdduxYC8B6NSOvjgg2EsAgDbBFTUAAABDEWoAAACGItQAAAAMRagBAAAYilADAAAwFKEGAABgKEINAADAUIQaAACAoQg1AAAAQxFqAAAAhiLUAAAADEWoAQAAGIpQAwAAMBShBgAAYChCDQAAwFCEGgAAgKEINQAAAEMRagAAAIYi1AAAAAxFqAEAABiKUAMAADAUoQYAAGAoQg0AAMBQhBoAAIChCDUAAABDEWoAAACGItQAAAAMRagBAAAYilADAAAwFKEGAABgKEINAADAUIQaAACAoQg1AAAAQxFqAAAAhiLUAAAADEWoAQAAGIpQAwAAMBShBgAAYChCDQAAwFCEGgAAgKEINQAAAEMRagAAAIYKeqj99a9/1T333KPY2Fh1795dQ4YMUVlZmX+/ZVlaunSpXC6XIiMjlZ6erkOHDgU8h8/nU25uruLi4hQVFaVJkybpxIkTHX0qAAAAbSqooVZdXa0bb7xRYWFheu2113T48GGtWLFCl19+uX/O8uXLtXLlSq1Zs0alpaVyOp0aN26camtr/XPcbrd27NihgoICFRcX6/Tp05owYYIaGxuDcFYAAABtIzSYL75s2TLFx8dr48aN/rEBAwb4/9myLK1evVqLFi3S5MmT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O+vzzz/XRx99JJvNph/96Efq3bt3W60LAACgy2vVlwnOnDmj6dOnq2/fvrr55pt10003yeVyKTs7W1999VVbrxEAAKBLalWozZkzR0VFRfrDH/6gL7/8Ul9++aVeeuklFRUVae7cuW29RgAAgC6pVR99/v73v9f27duVnp7uH/vJT36iyMhIZWVlae3atW21PgAAgC6rVVfUvvrqKzkcjmbjffr04aNPAACANtKqUBs5cqR++ctf6u9//7t/rK6uTo899phGjhzZZosDAADoylr10efq1as1fvx49evXT9dff71sNpsOHDigiIgI7dq1q63XCAAA0CW1KtSSk5P18ccfa+vWrfrwww9lWZZ+9rOf6e6771ZkZGRbrxEAAKBLalWo5efny+Fw6IEHHggY/93vfqfPP/9cCxYsaJPFAQAAdGWtukft2Wef1bXXXtts/Mc//rF++9vfXvSiAAAA0MpQ83g86tu3b7Px3r17q7Ky8qIXBQAAgFaGWnx8vN5+++1m42+//bZcLtdFLwoAAACtvEft/vvvl9vtVkNDg0aPHi1JeuONNzR//nz+MgEAAEAbaVWozZ8/X3/729+Uk5Oj+vp6SdJll12mBQsWaOHChW26QAAAgK6qVaFms9m0bNkyLV68WEeOHFFkZKQSExMVERHR1usDAADosloVamf16NFDw4cPb6u1AAAA4Fta9WUCAAAAtD9CDQAAwFCEGgAAgKEINQAAAEMRagAAAIYi1AAAAAxFqAEAABiKUAMAADAUoQYAAGAoQg0AAMBQhBoAAIChCDUAAABDEWoAAACGItQAAAAMRagBAAAYilADAAAwVFBDbe3atRo8eLBiYmIUExOjkSNH6rXXXvPvtyxLS5culcvlUmRkpNLT03Xo0KGA5/D5fMrNzVVcXJyioqI0adIknThxoqNPBQAAoM0FNdT69eunX//619q/f7/279+v0aNH69Zbb/XH2PLly7Vy5UqtWbNGpaWlcjqdGjdunGpra/3P4Xa7tWPHDhUUFKi4uFinT5/WhAkT1NjYGKzTAgAAaBM2y7KsYC/i23r16qUnn3xS06dPl8vlktvt1oIFCyR9c/XM4XBo2bJlmjFjhrxer3r37q0tW7borrvukiR99tlnio+P16uvvqrMzMwf9Jo1NTWy2+3yer2KiYlpt3M766rbjrX7awBd2dEXBwR7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YWHAeGFhoVJTU4O0KgAAgIt3yV9Rk6Q5c+bo3nvv1bBhwzRy5EitW7dOx48f18yZM4O9NAAAgFbrFKF211136YsvvtDjjz+uyspKJSUl6dVXX1X//v2DvTR0AhEREfrlL3/Z7ONyAPguvHegLdisH/LdUAAAAHS4S/4eNQAAgM6KUAMAADAUoQYAAGAoQg2dhmVZ+rd/+zf16tVLNptNBw4cCMo6jh07FtTXB2C2++67T7fddluwl4FLRKf41icgSTt37tSmTZu0Z88eDRw4UHFxccFeEgAAF4VQQ6dx9OhR9e3blx86BgB0Gnz0iU7hvvvuU25uro4fPy6bzaYBAwbIsiwtX75cAwcOVGRkpK6//npt377df8yePXtks9n0+uuva+jQoYqMjNTo0aNVVVWl1157TYMGDVJMTIymTJmir776yn/czp07NWrUKF1++eWKjY3VhAkTdPTo0e9c3+HDh/WTn/xEPXr0kMPh0L333qtTp061278PAG0jPT1dubm5crvd6tmzpxwOh9atW6czZ87oX//1XxUdHa2rrrpKr732miSpsbFR2dnZSkhIUGRkpK655ho99dRT3/ka3/deha6NUEOn8NRTT+nxxx9Xv379VFlZqdLSUv3iF7/Qxo0btXbtWh06dEizZ8/WPffco6KiooBjly5dqjVr1qikpEQVFRXKysrS6tWrtW3bNr3yyisqLCzUM888459/5swZzZkzR6WlpXrjjTfUrVs33X777WpqampxbZWVlUpLS9OQIUO0f/9+7dy5UydPnlRWVla7/jsB0DY2b96suLg47du3T7m5uXrwwQd15513KjU1Ve+9954yMzN177336quvvlJTU5P69eunF154QYcPH9aSJUv06KOP6oUXXjjv8//Q9yp0URbQSaxatcrq37+/ZVmWdfr0aeuyyy6zSkpKAuZkZ2dbU6ZMsSzLst58801LkrV7927//vz8fEuSdfToUf/YjBkzrMzMzPO+blVVlSXJ+uCDDyzLsqzy8nJLkvX+++9blmVZixcvtjIyMgKOqaiosCRZH330UavPF0D7S0tLs0aNGuV//PXXX1tRUVHWvffe6x+rrKy0JFnvvPNOi8+Rk5Nj3XHHHf7H06ZNs2699VbLsn7YexW6Nu5RQ6d0+PBh/f3vf9e4ceMCxuvr6zV06NCAscGDB/v/2eFwqHv37ho4cGDA2L59+/yPjx49qsWLF+vdd9/VqVOn/FfSjh8/rqSkpGZrKSsr05tvvqkePXo023f06FH96Ec/at1JAugQ336PCAkJUWxsrJKTk/1jDodDklRVVSVJ+u1vf6v/+q//0qeffqq6ujrV19dryJAhLT73hbxXoWsi1NApnY2nV155RVdccUXAvnP/7l5YWJj/n202W8Djs2Pf/lhz4sSJio+P1/r16+VyudTU1KSkpCTV19efdy0TJ07UsmXLmu3r27fvhZ0YgA7X0nvCue8b0jf/rb/wwguaPXu2VqxYoZEjRyo6OlpPPvmk9u7d2+JzX8h7FbomQg2d0nXXXaeIiAgdP35caWlpbfa8X3zxhY4cOaJnn31WN910kySpuLj4O4+54YYb9Pvf/14DBgxQaCj/yQGd2VtvvaXU1FTl5OT4x77ry0bt9V6FzoP/1UCnFB0drXnz5mn27NlqamrSqFGjVFNTo5KSEvXo0UPTpk1r1fP27NlTsbGxWrdunfr27avjx4/rkUce+c5jZs2apfXr12vKlCn693//d8XFxekvf/mLCgoKtH79eoWEhLRqLQDMc/XVV+u5557T66+/roSEBG3ZskWlpaVKSEhocX57vVeh8yDU0Gn9x3/8h/r06aP8/Hx98sknuvzyy3XDDTfo0UcfbfVzduvWTQUFBXr44YeVlJSka665Rk8//bTS09PPe4zL5dLbb7+tBQsWKDMzUz6fT/3799ctt9yibt344jXQmcycOVMHDhzQXXfdJZvNpilTpignJ8f/8x0taY/3KnQeNsuyrGAvAgAAAM3xf+cBAAAMRagBAAAYilADAAAwFKEGAABgKEINAADAUIQaAACAoQg1AAAAQxFqAAAAhiLUAAAADEWoAQAAGIpQAwAAMBShBgAt2L59u5KTkxUZGanY2FiNHTtWZ86ckSRt3LhRgwYN0mWXXaZrr71Wv/nNb/zHTZ8+XYMHD5bP55MkNTQ0KCUlRXfffXdQzgPApY1QA4BzVFZWasqUKZo+fbqOHDmiPXv2aPLkybIsS+vXr9eiRYv0q1/9SkeOHFFeXp4WL16szZs3S5KefvppnTlzRo888ogkafHixTp16lRAzAHAD2WzLMsK9iIAwCTvvfeeUlJSdOzYMfXv3z9g35VXXqlly5ZpypQp/rEnnnhCr776qkpKSiRJ77zzjtLS0vTII48oPz9fb7zxhm6++eYOPQcAnQOhBgDnaGxsVGZmpvbt26fMzExlZGToX/7lX/T111+rT58+ioyMVLdu//hA4uuvv5bdbtfJkyf9Y48++qjy8/O1YMEC/frXvw7GaQDoBEKDvQAAME1ISIgKCwtVUlKiXbt26ZlnntGiRYv0hz/8QZK0fv16jRgxotkxZzU1Nentt99WSEiIPv744w5dO4DOhXvUAKAFNptNN954ox577DG9//77Cg8P19tvv60rrrhCn3zyia6++uqALSEhwX/sk08+qSNHjqioqEivv/66Nm7cGMQzAXAp44oaAJxj7969euONN5SRkaE+ffpo7969+vzzzzVo0CAtXbpUDz/8sGJiYjR+/Hj5fD7t379f1dXVmjNnjg4cOKAlS5Zo+/btuvHGG/XUU0/p5z//udLS0jRw4MBgnxqASwz3qAHAOY4cOaLZs2frvffeU01Njfr376/c3Fw99NBDkqRt27bpySef1OHDhxUVFaXk5GS53W6NHz9eKSkpGjVqlJ599ln/802ePFknT57UH//4x4CPSAHg+xBqAAAAhuIeNQAAAEMRagAAAIYi1AAAAAxFqAEAABiKUAMAADAUoQYAAGAoQg0AAMBQhBoAAIChCDUAAABDEWoAAACGItQAAAAM9f8AjOvtEdjfzRAAAAAASUVORK5CYII=",
      "text/plain": [
       "<Figure size 700x700 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize = (7,7))\n",
    "sns.countplot(x = 'sex' , data = df ,  palette='bright')\n",
    "plt.title('Sex')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "id": "5378c343-d9c8-4b63-a048-6fc00df4fb09",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "sex\n",
       "male      676\n",
       "female    662\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 135,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['sex'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "id": "7546a8fd-c3cd-4181-af3d-8ee7bb7b1569",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\athar\\AppData\\Local\\Temp\\ipykernel_17016\\2798258322.py:2: FutureWarning: \n",
      "\n",
      "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
      "\n",
      "  sns.countplot(x = 'smoker' , data = df ,  palette='bright')\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'smoker')"
      ]
     },
     "execution_count": 136,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 700x700 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize = (7,7))\n",
    "sns.countplot(x = 'smoker' , data = df ,  palette='bright')\n",
    "plt.title('smoker')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "id": "4876e59f-72ee-4f91-a29c-d778517172dc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "smoker\n",
       "no     1064\n",
       "yes     274\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 137,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['smoker'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "id": "9e5caee4-0732-48ff-abeb-a157941dc4f1",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\athar\\AppData\\Local\\Temp\\ipykernel_17016\\1686393120.py:2: FutureWarning: \n",
      "\n",
      "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
      "\n",
      "  sns.countplot(x = 'children' , data = df , palette='bright')\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Children')"
      ]
     },
     "execution_count": 138,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize = (10,3))\n",
    "sns.countplot(x = 'children' , data = df , palette='bright')\n",
    "plt.title('Children')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1d788fb6-2e1e-4f0b-b609-e16777204fda",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "30ea1c23-bff7-4ef4-9677-3ae02c50ced0",
   "metadata": {},
   "source": [
    "### Data Preprocessing - Encoding"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "id": "79fecf97-6a7d-4cd7-93ed-4fa9c9b97038",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import OneHotEncoder"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "id": "f0473a7a-7e14-415a-a8ee-33bcd5c93f3c",
   "metadata": {},
   "outputs": [],
   "source": [
    "OHE = OneHotEncoder(drop = 'first')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "id": "7ffd1c7e-69c9-4240-a17b-823d6027338e",
   "metadata": {},
   "outputs": [],
   "source": [
    "n_df = OHE.fit_transform(df[['sex' , 'smoker']]).toarray()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "id": "275bf3f2-808c-4b09-8e27-0efa051c6ec8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0., 1.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       ...,\n",
       "       [0., 0.],\n",
       "       [0., 0.],\n",
       "       [0., 1.]])"
      ]
     },
     "execution_count": 143,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "n_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "id": "73238698-cdf1-444b-9f08-e6cfaeec628b",
   "metadata": {},
   "outputs": [],
   "source": [
    "new_df = pd.DataFrame(n_df , columns = ['sex_male' , 'smoker_yes'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "id": "7e0e7201-ba6e-436c-824a-a281a959a457",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sex_male</th>\n",
       "      <th>smoker_yes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   sex_male  smoker_yes\n",
       "0       0.0         1.0\n",
       "1       1.0         0.0"
      ]
     },
     "execution_count": 145,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_df.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "id": "ef80bb58-6307-457c-8a87-c8e01f931c5d",
   "metadata": {},
   "outputs": [],
   "source": [
    "df[['sex_male' , 'smoker_yes']] = new_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "id": "3f7cefff-64b3-40f7-8ff7-da8008ab97ea",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>sex</th>\n",
       "      <th>bmi</th>\n",
       "      <th>children</th>\n",
       "      <th>smoker</th>\n",
       "      <th>region</th>\n",
       "      <th>expenses</th>\n",
       "      <th>sex_male</th>\n",
       "      <th>smoker_yes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>19</td>\n",
       "      <td>female</td>\n",
       "      <td>27.9</td>\n",
       "      <td>0</td>\n",
       "      <td>yes</td>\n",
       "      <td>southwest</td>\n",
       "      <td>16884.92</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>18</td>\n",
       "      <td>male</td>\n",
       "      <td>33.8</td>\n",
       "      <td>1</td>\n",
       "      <td>no</td>\n",
       "      <td>southeast</td>\n",
       "      <td>1725.55</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>28</td>\n",
       "      <td>male</td>\n",
       "      <td>33.0</td>\n",
       "      <td>3</td>\n",
       "      <td>no</td>\n",
       "      <td>southeast</td>\n",
       "      <td>4449.46</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>33</td>\n",
       "      <td>male</td>\n",
       "      <td>22.7</td>\n",
       "      <td>0</td>\n",
       "      <td>no</td>\n",
       "      <td>northwest</td>\n",
       "      <td>21984.47</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>32</td>\n",
       "      <td>male</td>\n",
       "      <td>28.9</td>\n",
       "      <td>0</td>\n",
       "      <td>no</td>\n",
       "      <td>northwest</td>\n",
       "      <td>3866.86</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1333</th>\n",
       "      <td>50</td>\n",
       "      <td>male</td>\n",
       "      <td>31.0</td>\n",
       "      <td>3</td>\n",
       "      <td>no</td>\n",
       "      <td>northwest</td>\n",
       "      <td>10600.55</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1334</th>\n",
       "      <td>18</td>\n",
       "      <td>female</td>\n",
       "      <td>31.9</td>\n",
       "      <td>0</td>\n",
       "      <td>no</td>\n",
       "      <td>northeast</td>\n",
       "      <td>2205.98</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1335</th>\n",
       "      <td>18</td>\n",
       "      <td>female</td>\n",
       "      <td>36.9</td>\n",
       "      <td>0</td>\n",
       "      <td>no</td>\n",
       "      <td>southeast</td>\n",
       "      <td>1629.83</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1336</th>\n",
       "      <td>21</td>\n",
       "      <td>female</td>\n",
       "      <td>25.8</td>\n",
       "      <td>0</td>\n",
       "      <td>no</td>\n",
       "      <td>southwest</td>\n",
       "      <td>2007.95</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1337</th>\n",
       "      <td>61</td>\n",
       "      <td>female</td>\n",
       "      <td>29.1</td>\n",
       "      <td>0</td>\n",
       "      <td>yes</td>\n",
       "      <td>northwest</td>\n",
       "      <td>29141.36</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1338 rows × 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      age     sex   bmi  children smoker     region  expenses  sex_male  \\\n",
       "0      19  female  27.9         0    yes  southwest  16884.92       0.0   \n",
       "1      18    male  33.8         1     no  southeast   1725.55       1.0   \n",
       "2      28    male  33.0         3     no  southeast   4449.46       1.0   \n",
       "3      33    male  22.7         0     no  northwest  21984.47       1.0   \n",
       "4      32    male  28.9         0     no  northwest   3866.86       1.0   \n",
       "...   ...     ...   ...       ...    ...        ...       ...       ...   \n",
       "1333   50    male  31.0         3     no  northwest  10600.55       1.0   \n",
       "1334   18  female  31.9         0     no  northeast   2205.98       0.0   \n",
       "1335   18  female  36.9         0     no  southeast   1629.83       0.0   \n",
       "1336   21  female  25.8         0     no  southwest   2007.95       0.0   \n",
       "1337   61  female  29.1         0    yes  northwest  29141.36       0.0   \n",
       "\n",
       "      smoker_yes  \n",
       "0            1.0  \n",
       "1            0.0  \n",
       "2            0.0  \n",
       "3            0.0  \n",
       "4            0.0  \n",
       "...          ...  \n",
       "1333         0.0  \n",
       "1334         0.0  \n",
       "1335         0.0  \n",
       "1336         0.0  \n",
       "1337         1.0  \n",
       "\n",
       "[1338 rows x 9 columns]"
      ]
     },
     "execution_count": 147,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "id": "c49277dd-68c2-48a9-8785-b0530f01f101",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1338, 9)"
      ]
     },
     "execution_count": 148,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "id": "a6412500-3ab0-4a9d-a163-3a62184773d9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['southwest', 'southeast', 'northwest', 'northeast'], dtype=object)"
      ]
     },
     "execution_count": 149,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['region'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "id": "d16583b3-347d-482f-9615-2593b967a0d1",
   "metadata": {},
   "outputs": [],
   "source": [
    "en_ord_data = [['southwest', 'southeast', 'northwest', 'northeast']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d6769ff6-55a5-4b93-bb92-c35fff007683",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "88ba6f53-fba2-4fc7-9a9a-db57923d2af8",
   "metadata": {},
   "source": [
    "### Encoding the Categorical feature"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "id": "a8380839-2f33-4700-80fd-f8fc541fd913",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import OrdinalEncoder"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "id": "bdeec20f-9b4b-4d91-b85f-5b1431ced630",
   "metadata": {},
   "outputs": [],
   "source": [
    "OE  = OrdinalEncoder(categories=en_ord_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "id": "de6f5bb5-9dd9-4561-a42f-c2dc0a7a1750",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['region'] = OE.fit_transform(df[['region']])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ff8688dc-7fb4-48c3-8170-ae65ec269144",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "id": "af03eddf-924b-4ea4-8a62-6a8c1e3ef048",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.drop(columns = 'smoker' , inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "id": "ffe31b58-5992-4cf8-8b97-c5d5f71bd2da",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.drop(columns = 'sex' , inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "id": "6b30d9b0-41f5-483b-ba61-09b3d857327b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>bmi</th>\n",
       "      <th>children</th>\n",
       "      <th>region</th>\n",
       "      <th>expenses</th>\n",
       "      <th>sex_male</th>\n",
       "      <th>smoker_yes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>19</td>\n",
       "      <td>27.9</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>16884.92</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>18</td>\n",
       "      <td>33.8</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1725.55</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   age   bmi  children  region  expenses  sex_male  smoker_yes\n",
       "0   19  27.9         0     0.0  16884.92       0.0         1.0\n",
       "1   18  33.8         1     1.0   1725.55       1.0         0.0"
      ]
     },
     "execution_count": 157,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c57765da-e2b6-47b1-aa30-bddae966dd13",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "a77d1a5b-3a10-431f-a946-f3e20ff8ca2a",
   "metadata": {},
   "source": [
    "### Splitting the Feature and Target"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "id": "531ad1ab-ff92-4314-aa20-c72bb4885f2a",
   "metadata": {},
   "outputs": [],
   "source": [
    "x = df.drop(columns = 'expenses')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "id": "582303c8-9722-4fbf-8cea-86802eab1748",
   "metadata": {},
   "outputs": [],
   "source": [
    "y = df['expenses']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7cbeb7a7-8598-43f2-bb5d-beabd043724b",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "ad91e8d6-e500-493c-bce0-a9cf07a6099d",
   "metadata": {},
   "source": [
    "### train_test_split"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "434fb8a3-93cc-4aa6-9848-205e6c173659",
   "metadata": {},
   "source": [
    "Splitting the data into training data and testing data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "id": "31c2d709-b3e3-4f99-b48d-fd0f572d146d",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "id": "c2180373-77d5-46ba-a0ea-34f18636c19d",
   "metadata": {},
   "outputs": [],
   "source": [
    "x_train , x_test ,y_train , y_test = train_test_split(x , y , test_size=0.1, random_state=25)"
   ]
  },
  {
   "cell_type": "raw",
   "id": "4a4a6386-bd22-4cbe-ae49-17c351d01ba1",
   "metadata": {},
   "source": [
    "x_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "id": "1b8ada83-ea63-460f-b097-8d58c4d9b8c2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1338, 6)"
      ]
     },
     "execution_count": 165,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cb0f0253-a80f-4920-a661-5ba1f212044f",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "8652486e-1f59-4bd1-8726-e2fd6919b5e2",
   "metadata": {},
   "source": [
    "### Model Training"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "id": "1275c36a-05f1-4f24-94fe-3dd2b7f30d53",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import RandomForestRegressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "id": "bc09d69e-8b0c-4a99-bcd7-d87ba5d5a9c4",
   "metadata": {},
   "outputs": [],
   "source": [
    "RFR = RandomForestRegressor(\n",
    "    max_depth=10,          \n",
    "    min_samples_split=10,\n",
    "    min_samples_leaf=4,    \n",
    "    n_estimators=100,    \n",
    "    random_state=4\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "id": "9cd17880-c60a-4c43-a055-00319f4012f8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-2 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: black;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-2 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-2 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-2 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: block;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-2 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-2 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-2 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-2 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-2 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 1ex;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-2 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-2 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestRegressor(max_depth=10, min_samples_leaf=4, min_samples_split=10,\n",
       "                      random_state=4)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;RandomForestRegressor<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.ensemble.RandomForestRegressor.html\">?<span>Documentation for RandomForestRegressor</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>RandomForestRegressor(max_depth=10, min_samples_leaf=4, min_samples_split=10,\n",
       "                      random_state=4)</pre></div> </div></div></div></div>"
      ],
      "text/plain": [
       "RandomForestRegressor(max_depth=10, min_samples_leaf=4, min_samples_split=10,\n",
       "                      random_state=4)"
      ]
     },
     "execution_count": 169,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "RFR.fit(x_train , y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "id": "c6915cea-f699-4601-b7b2-85e7bbb57ed4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "90.81227902878162"
      ]
     },
     "execution_count": 170,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "RFR.score(x_train , y_train)*100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "id": "3a223998-f7b2-4c2e-b4a0-de9b86ce510b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "91.92214313452732"
      ]
     },
     "execution_count": 171,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "RFR.score(x_test , y_test)*100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "id": "50e3b9a9-857c-4432-8041-bcb4f1b276fe",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([17951.70213044,  3869.56129377,  5939.898961  , ...,\n",
       "        2992.61901565,  2130.55165649, 28124.94876583])"
      ]
     },
     "execution_count": 172,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "RFR.predict(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "id": "4d80d79b-843c-473b-87c8-1781a3be439d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>bmi</th>\n",
       "      <th>children</th>\n",
       "      <th>region</th>\n",
       "      <th>sex_male</th>\n",
       "      <th>smoker_yes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>19</td>\n",
       "      <td>27.9</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>18</td>\n",
       "      <td>33.8</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>28</td>\n",
       "      <td>33.0</td>\n",
       "      <td>3</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>33</td>\n",
       "      <td>22.7</td>\n",
       "      <td>0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>32</td>\n",
       "      <td>28.9</td>\n",
       "      <td>0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1333</th>\n",
       "      <td>50</td>\n",
       "      <td>31.0</td>\n",
       "      <td>3</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1334</th>\n",
       "      <td>18</td>\n",
       "      <td>31.9</td>\n",
       "      <td>0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1335</th>\n",
       "      <td>18</td>\n",
       "      <td>36.9</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1336</th>\n",
       "      <td>21</td>\n",
       "      <td>25.8</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1337</th>\n",
       "      <td>61</td>\n",
       "      <td>29.1</td>\n",
       "      <td>0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1338 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      age   bmi  children  region  sex_male  smoker_yes\n",
       "0      19  27.9         0     0.0       0.0         1.0\n",
       "1      18  33.8         1     1.0       1.0         0.0\n",
       "2      28  33.0         3     1.0       1.0         0.0\n",
       "3      33  22.7         0     2.0       1.0         0.0\n",
       "4      32  28.9         0     2.0       1.0         0.0\n",
       "...   ...   ...       ...     ...       ...         ...\n",
       "1333   50  31.0         3     2.0       1.0         0.0\n",
       "1334   18  31.9         0     3.0       0.0         0.0\n",
       "1335   18  36.9         0     1.0       0.0         0.0\n",
       "1336   21  25.8         0     0.0       0.0         0.0\n",
       "1337   61  29.1         0     2.0       0.0         1.0\n",
       "\n",
       "[1338 rows x 6 columns]"
      ]
     },
     "execution_count": 173,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e3fafe66-0e65-4b55-9758-8901560e923b",
   "metadata": {},
   "source": [
    "### Building The Predictive System"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "id": "10304ce4-c504-4e91-967f-d4549cd211f7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The total expenses are in USD :  [14209.85738363]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\athar\\anaconda3\\Lib\\site-packages\\sklearn\\base.py:493: UserWarning: X does not have valid feature names, but RandomForestRegressor was fitted with feature names\n",
      "  warnings.warn(\n"
     ]
    }
   ],
   "source": [
    "input_data = (61 , 29.1 , 0 , 2.0 , 1.0 , 0.0)\n",
    "input_data_as_numpy_array = np.asarray(input_data)\n",
    "input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)\n",
    "\n",
    "prediction = RFR.predict(input_data_reshaped)\n",
    "print('The total expenses are in USD : ' , prediction)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "af47e9ab-64eb-4fbc-8755-33a8663a52c6",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
